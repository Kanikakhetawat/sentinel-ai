package com.phonepe.sentinelai.core.model;

import lombok.Data;

import java.util.Map;

/**
 *
 */
@Data
public class ModelUsageStats {

    @Data
    public static class PromptTokenDetails {
        /**
         * Cached tokens present in the prompt.
         */
        private int cachedTokens = 0;
        /**
         * Audio input tokens present in the prompt.
         */
        private int audioTokens = 0;

        public PromptTokenDetails incrementCachedTokens(int value) {
            this.cachedTokens += value;
            return this;
        }

        public PromptTokenDetails incrementAudioTokens(int value) {
            this.audioTokens += value;
            return this;
        }
    }

    @Data
    public static class ResponseTokenDetails {
        /**
         * Tokens generated by the model for reasoning.
         */
        private int reasoningTokens = 0;
        /**
         * When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.
         */
        private int acceptedPredictionTokens = 0;
        /**
         * When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion
         * . However, like reasoning tokens, these tokens are still counted in the total completion tokens for
         * purposes of billing, output, and context window limits.
         */
        private int rejectedPredictionTokens = 0;
        /**
         * Audio input tokens generated by the model.
         */
        private int audioTokens;

        public ResponseTokenDetails incrementReasoningTokens(int value) {
            this.reasoningTokens += value;
            return this;
        }

        public ResponseTokenDetails incrementAcceptedPredictionTokens(int value) {
            this.acceptedPredictionTokens += value;
            return this;
        }

        public ResponseTokenDetails incrementRejectedPredictionTokens(int value) {
            this.rejectedPredictionTokens += value;
            return this;
        }

        public ResponseTokenDetails incrementAudioTokens(int value) {
            this.audioTokens += value;
            return this;
        }
    }

    /**
     * Number of request made for this run
     */
    private int requestsForRun = 0;

    /**
     * Tool calls made for this run
     */
    private int toolCallsForRun = 0;

    /**
     * Number of request/prompt tokens used in this run. Eqv to "prompt_tokens" param in open-ai usage object.
     */
    private int requestTokens = 0;

    /**
     * Number of completion/response tokens used in this run. Eqv to "completion_tokens" param in open-ai usage object.
     */
    private int responseTokens = 0;

    /**
     * Total tokens used in the whole run. Eqv to "total_tokens" param in open-ai usage object.
     */
    private int totalTokens = 0;

    /**
     * Token usage for prompts
     */
    private PromptTokenDetails requestTokenDetails = new PromptTokenDetails();

    /**
     * Token usage for responses
     */
    private ResponseTokenDetails responseTokenDetails = new ResponseTokenDetails();

    // Total tokens used in the whole run, should generally be equal to `requestTokens + responseTokens`.
    private Map<String, Integer> details = null;
    // Any extra details returned by the model.

    public ModelUsageStats incrementRequestsForRun() {
        return incrementRequestsForRun(1);
    }

    public ModelUsageStats incrementRequestsForRun(int value) {
        this.requestsForRun += value;
        return this;
    }

    public ModelUsageStats incrementToolCallsForRun() {
        return incrementToolCallsForRun(1);
    }

    public ModelUsageStats incrementToolCallsForRun(int value) {
        this.toolCallsForRun += value;
        return this;
    }

    public ModelUsageStats incrementRequestTokens(int value) {
        this.requestTokens += value;
        return this;
    }

    public ModelUsageStats incrementResponseTokens(int value) {
        this.responseTokens += value;
        return this;
    }

    public ModelUsageStats incrementTotalTokens(int value) {
        this.totalTokens += value;
        return this;
    }
}
